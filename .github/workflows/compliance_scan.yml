name: Compliance Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      auto_fix:
        description: 'Enable auto-fix for security issues'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  compliance-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
    
    - name: Set scan parameters
      id: params
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          AUTO_FIX="${{ github.event.inputs.auto_fix }}"
        else
          AUTO_FIX="false"  # Enable auto-fix for all events (PR, push, schedule)
        fi
        echo "auto_fix=$AUTO_FIX" >> $GITHUB_OUTPUT
        echo "Auto-fix enabled: $AUTO_FIX"
    
    - name: Run Compliance Security Scan
      env:
        AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
        BEDROCK_KB_ID: ${{ vars.BEDROCK_KB_ID || 'RL3YC1HUKZ' }}
        BEDROCK_MODEL_ID: ${{ vars.BEDROCK_MODEL_ID || 'anthropic.claude-3-haiku-20240307-v1:0' }}
        REPORTS_S3_BUCKET: ${{ vars.REPORTS_S3_BUCKET || 'ai-security-scanner-reports-1759503117' }}
      run: |
        SCAN_ARGS=""
        if [ "${{ steps.params.outputs.auto_fix }}" = "true" ]; then
          SCAN_ARGS="--fix"
        fi
        echo "Running: python src/compliance_scanner.py $SCAN_ARGS"
        echo "Using AWS Region: $AWS_REGION"
        echo "Using KB ID: $BEDROCK_KB_ID"
        echo "Using Model: $BEDROCK_MODEL_ID"
        if [ -n "$REPORTS_S3_BUCKET" ]; then
          echo "Reports will be uploaded to: s3://$REPORTS_S3_BUCKET/reports/"
          echo "Website URL: https://$REPORTS_S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com"
        fi
        python src/compliance_scanner.py $SCAN_ARGS
        
        # Log S3 upload results
        if [ -n "$REPORTS_S3_BUCKET" ] && [ -f "compliance_report.json" ]; then
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          echo "Report uploaded to: s3://$REPORTS_S3_BUCKET/reports/compliance_report_$TIMESTAMP.json"
        fi
    
    - name: Commit and push fixes
      if: steps.params.outputs.auto_fix == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üîß Auto-fix security issues [skip ci]"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git push origin HEAD:${{ github.head_ref }}
          else
            git push origin HEAD:${{ github.ref_name }}
          fi
        fi
    
    - name: Generate PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = `## üìö Organization Knowledge Base - Policy Analysis\n\n`;
          
          if (fs.existsSync('compliance_report.json')) {
            const report = JSON.parse(fs.readFileSync('compliance_report.json', 'utf8'));
            
            comment += `**üìä Policy Gaps:** ${report.total_issues || 0}\n`;
            comment += `**üö® CVEs Detected:** ${report.cve_count || 0}\n`;
            comment += `**‚úÖ Compliance Status:** ${report.total_issues > 0 ? '‚ùå Non-Compliant' : '‚úÖ Compliant'}\n\n`;
            
            if (report.total_issues > 0) {
              comment += `### üîç Policy Violations (${report.total_issues})\n\n`;
              
              if (report.results && report.results.length > 0) {
                const fileGroups = {};
                for (const result of report.results) {
                  if (result.issues && result.issues.length > 0) {
                    fileGroups[result.filepath] = result.issues;
                  }
                }
                
                for (const [filepath, issues] of Object.entries(fileGroups)) {
                  comment += `#### üìÅ \`${filepath}\`\n`;
                  
                  const severityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };
                  issues.sort((a, b) => severityOrder[a.severity] - severityOrder[b.severity]);
                  
                  for (const issue of issues) {
                    const emoji = issue.severity === 'critical' ? 'üö®' : issue.severity === 'high' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
                    comment += `${emoji} **Line ${issue.line}: ${issue.severity.toUpperCase()}**\n\n`;
                    comment += `**üìù Issue Description:**\n${issue.description}\n\n`;
                    
                    if (issue.compliance_violations && issue.compliance_violations.length > 0) {
                      comment += `**üìã Compliance Violations:**\n${issue.compliance_violations.join(', ')}\n\n`;
                    }
                    
                    if (issue.kb_rule) {
                      comment += `**üìö Knowledge Base Source:**\n${issue.kb_rule}\n\n`;
                    }
                    
                    if (issue.s3_sources && issue.s3_sources.length > 0) {
                      comment += `**üìÑ S3 RFC Documentation:**\n${issue.s3_sources.join('\n')}\n\n`;
                    }
                    
                    if (issue.remediation) {
                      comment += `**üîß Recommended Fix:**\n${issue.remediation}\n\n`;
                    }
                    
                    comment += `---\n\n`;
                  }
                }
              }
            }
            
            comment += `\n*üè¢ Analysis based on your organization's policies and standards*`;
          } else {
            comment += `Policy analysis completed but no detailed report available.\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Block on Critical Issues
      run: |
        if [ -f "compliance_report.json" ]; then
          CRITICAL=$(jq -r '.by_severity.critical // 0' compliance_report.json)
          if [ "$CRITICAL" -gt 0 ] && [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "‚ùå $CRITICAL critical security issues found. Blocking PR merge."
            exit 1
          fi
        fi
    
    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: compliance-reports
        path: |
          compliance_report.json
          error_log.txt